name: Build and Release OpenWrt

on:
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest

    env:
      REPO_URL: https://github.com/immortalwrt/immortalwrt.git
      REPO_BRANCH: openwrt-23.05
      CONFIG_FILE: .config
      UPLOAD_BIN_DIR: true
      UPLOAD_FIRMWARE: true
      UPLOAD_RELEASE: true
      TZ: Asia/Shanghai
      GITHUB_TOKEN: ${{ secrets.TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Expand disk space
        run: |
          sudo fallocate -l 14G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile

      - name: Set up environment
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libncurses5-dev libncursesw5-dev zlib1g-dev gawk git ccache gettext libssl-dev xsltproc wget unzip python3

      - name: Clone ImmortalWrt
        run: |
          git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
          cd openwrt
          cp $GITHUB_WORKSPACE/$CONFIG_FILE .config

      - name: Cache OpenWrt build (缓存 OpenWrt 构建文件)
        uses: actions/cache@v2
        with:
          path: |
            openwrt/bin
            openwrt/build_dir
            openwrt/staging_dir
            openwrt/tmp
          key: ${{ runner.os }}-openwrt-${{ hashFiles('openwrt/.config') }}
          restore-keys: |
            ${{ runner.os }}-openwrt-

      - name: Update and install feeds (更新并安装新的源索引)
        run: |
          cd openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a    
      - name: 下载软件包 (根据 feeds 源下载固件所需的源代码)
        id: package
        run: |
          cd openwrt
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Verify cache restoration (验证缓存)
        run: |
          cd openwrt
          if [ -d "build_dir" ] && [ -d "staging_dir" ]; then
            echo "Cache restored successfully."
          else
            echo "Cache restoration failed."
          fi
      - name: Build OpenWrt (编译固件如果存在缓存则使用缓存)
          id: compile
          run: |
            cd openwrt
            echo -e "$(nproc) thread compile"
            make defconfig
            echo "No cache available, starting full build."
            make -j$(nproc) || make -j1 || make -j1 V=s
            echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
            grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
            [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
            echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Upload firmware
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt-firmware
          path: openwrt/bin

      - name: 整理固件文件
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: 生成发布标签
        id: tag
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
          echo "release_tag=$(date +"%Y.%m.%d-%H.%M")" >> ${GITHUB_OUTPUT}
          touch release.txt
          echo "
          💻 架构: x86-64

          📂 源码: ${{ env.REPO_URL }}

          🌳 分支: ${{ env.REPO_BRANCH }}

          ⏱️ 编译时间: $(date +"%Y年%m月%d日%H时%M分")

          🌐 管理地址: 犹未可知 , 子网掩码: 255.255.252.0

          👤 用户名: root

          🔒 密码: 空
          " >> release.txt
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          files: openwrt/bin/**/*
          tag_name: ${{ steps.tag.outputs.release_tag }}
          release_name: Release ${{ steps.tag.outputs.release_tag }}
          body: |
            This is an automated release by GitHub Actions.
          draft: false
          prerelease: false
